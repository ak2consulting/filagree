{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
\cocoascreenfonts1{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fnil\fcharset0 LucidaGrande;\f2\fswiss\fcharset0 Helvetica;
\f3\fmodern\fcharset0 CourierNewPS-BoldMT;}
{\colortbl;\red255\green255\blue255;\red63\green105\blue30;\red0\green121\blue165;\red0\green90\blue124;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid101\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww28600\viewh16520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs28 \cf0 Filagree
\b0  is a scripting language. Its design goals are:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls1\ilvl0\cf0     
\f1 \uc0\u8259 
\f0     simplicity\
    
\f1 \uc0\u8259 
\f0     portability\
    
\f1 \uc0\u8259 
\f0     low footprint (VM is ~20KB on ARM)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
It is dynamically typed, garbage collected, has few keywords and minimal syntax, and integrates easily with C.\
\

\b Tutorial\

\b0 \
filagree may be built and run from the command line:\

\f2 \
    $ make\
    $ ./filagree\
    f> \cf2 a = 7+8\cf0 \
    f> \cf2 sys.print(a)\cf0 \

\f3\b \cf3 \
    15\

\f2\b0 \cf0 \
    f> ^D\
    $ \
\

\f0 If given an argument, it will interpret a file:\

\f2 \
    $ echo "\cf2 sys.print('how you ' + 'doin')\cf0 " > iamafile.fg\
    $ ./filagree imafile
\f3\b \cf4 \
  how you doin
\f2\b0 \cf0 \
    $\
\

\f0 There is one structure, a list, which may contain values indexed by number (array) and/or string (map):\

\f2 \
\cf2     a = [3, 1]\
    b = [4, 'p':5, 'q':a] \
    sys.print(b['p'] + '  ' +  b.q[0])\
\cf0 \

\f3\b \cf3     5  3
\f2 \

\b0 \cf0 \

\f0 Actually, any variable may contain mapped values:\

\f2 \
\cf2     a = 7\
    a.too = 'buckle my shoe'\
\cf0 \

\f0 Comments are either:\

\f2 \
\cf2     x = 1 # single line, or\
    y = 2 /* multiple\
	    line */\
\cf0 \

\f0 Functions are first-order variables:\

\f2 \
\cf2     f = function(p,q,r)\
        return p+q+r, ' boo'    # r is nil\
    end\
    a, b = 7, 8\
    c, d = f(a,b)\
    sys.print(c + d)\
\cf0 \

\f3\b \cf3     15 boo\

\f2\b0 \cf0 \
\cf2     if 0 then\
         sys.print('zero')\
        else\
         sys.print('one')\
    end\
\cf0 \

\f3\b \cf3     one\

\f2\b0 \cf0 \
\cf2     if a = false then\
        sys.print('seven')\
    else if b = 8 then\
        sys.print('ate')\
    end\
\cf0 \

\f3\b \cf3     ate\

\f2\b0 \cf0 \
\cf2     n = 3\
    while n\
        sys.print(n)\
        n = n-1\
    end\
\cf0 \

\f3\b \cf3     3\
    2\
    1\

\f2\b0 \cf0 \

\f0 There are also iterators and comprehensions:\

\f2 \
\cf2     x = [3,1,4,1,5,9]\
    y = [n+1 for n in x where n > 3]    # y = [5,6,10]\
    for z in y where z < 9\
        sys.print(z)\
    end\
\cf0 \

\f3\b \cf3     5\
    6\

\f2\b0 \cf0 \

\f0 Exceptions, and try/catch:\

\f2 \
\cf2     try\
        m = n % 2\
        if m == 1 then\
            throw ['code':99, 'flavor':'strawberry']\
        end\
    catch e\
        sys.print(e.flavor + ' ice cream is yummy')\
    end\
\cf0 \

\f0 A few functions come built-in, such as for serialization:\

\f2 \
\cf2     a = [2,3,4, 'x':7]\
    b = a.serialize()    # serializes any variable, including a nested structure\
    c = b.deserialize()\
    d = c.x + c[2]    # 11\
\cf0 \

\f0 and file access:\

\f2 \
\cf2     x = [2,'3':4,'5']\
    sys.save(x, 'test_file')\
    y = sys.load('test_file')\
    sys.remove('test_file')\
    z = y == x                        # true\
\cf0 \

\f0 and sort; you provide the compare function for custom structures:\

\f2 \
\cf2     p = [3,1,4,1,5,9,6,2]\
    p.sort()                                                             # 1,1,2,3,4,5,6,9\
    q = [['a':3, 'b':4], ['a':2, 'b':5]]\
    q.sort(function(x,y) return x.a - y.a end)\
    sys.print(q)                                                      # [['a':2, 'b':5], ['a':3, 'b':4]]\
\cf0 \

\f0 and find / replace:\

\f2 \
\cf2     p = 'one two three'\
    q = p.find('two')                # q = 4\
    r = p.part(4,3)                   # r = 'two'\
    s = p.replace('two', '2')    # s = 'one 2 three'\
\cf0 \

\f0 and function arguments:\

\f2 \
\cf2     f = function(x,y)\
        z = sys.args()\
        return z.length\
    end\
    g = f(6,7,8,9)        # g = 4\
\cf0 \

\f0 and atoi:\

\f2 \
\cf2     n,i = sys.atoi('because 765', 8)    # n = 756, i = 3\
\cf0 \
\

\f0\b Advanced Features
\b0 \
\
Short circuit:\

\f2 \
\cf2     f = function()\
        throw 99\
    end\
    g = nil or f()    # throws exception\
    h = 7 or f()    # does not throw exception\
    i = 8 and f()    # throws exception\
\cf0 \

\f0 Closure:\

\f2 \
\cf2     x = 7\
    f = function(a)(x)\
        return a+x\
    end \
    g = f(3)    # g = 10\
\cf0 \

\f0 Custom get and set:\

\f2 \
\cf2     x = ['get': function(self, y)        # 'get' is a reserved map key for making a custom getter\
            if not self!list then    # '!' instead of '.' means get, but not using the custom getter\
                self!list = []\
            end\
            if y == 'p' then\
                return 2\
            else\
                return 3\
            end\
        end ]\
    y = 10*x.p + x.q    # y = 23\
\
    x = ['set': function(self, y, z)        # 'set' is also reserved, for making a custom setter\
            if y == 'p' then\
                self!a = z*2    # '!' here instead of '.' means set, without the custom setter\
            else\
                self!b = z*4\
            end\
        end ]\
    x.p = 6\
    y = 10*x.a + (x.b or 5)    # y = 125\
\cf0 \

\f0 C integration:\

\f2 \
\pard\tx866\pardeftab866\pardirnatural
\cf2     struct variable *my_find(context_p context, const struct byte_array *name) \{\
        const char *s = byte_array_to_string(s);\
        if (!strcmp(s, "x"))\
            return variable_new_int(context, 66);\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf2         return NULL;\
    \}\
\
    struct byte_array *program = build_file('sys.print(x+9) return 12');\
    struct variable *r = execute(program, &find); // prints '68'; r is a variable with r->type = VM_INT and r->integer = 12\
\cf0 \
\

\f0\b Code Structure\

\b0 \
filagree source code consists of eight modules:\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls2\ilvl0\cf0     
\f1 \uc0\u8259 
\f0     compile: compile fg code into byte code\
    
\f1 \uc0\u8259 
\f0     interpret: runs either fg code or byte code\
    
\f1 \uc0\u8259 
\f0     vm: virtual machine\
    
\f1 \uc0\u8259 
\f0     variable: variable-specific VM code\
    
\f1 \uc0\u8259 
\f0     sys: built-in functions, such as file and UI access\
    
\f1 \uc0\u8259 
\f0     serial: serializes and deserializes primitives\
    
\f1 \uc0\u8259 
\f0     struct: array, byte array, map and stack data structures\
    
\f1 \uc0\u8259 
\f0     hal: hardware abstraction layer\
    
\f1 \uc0\u8259 
\f0     util: miscellaneous\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
The source code includes ports to:\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural
\ls3\ilvl0\cf0     
\f1 \uc0\u8259 
\f0     Android\
    
\f1 \uc0\u8259 
\f0     iOS\
    
\f1 \uc0\u8259 
\f0     OSX\
    
\f1 \uc0\u8259 
\f0     Windows\
    
\f1 \uc0\u8259 
\f0     Linux\
(Actually, it has not been compiled for Windows yet , and there is currently only a HAL implementation for OSX.)\
}