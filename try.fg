/*
a = []
a{2} = 3
b = a[2]
*/

/*
f = function() return 7 end
f.get = function(self, key) if key=='b' then return 
    function() return 9 end
    else return 8 end end

g = f()
h = f.a
i = f.b()
*/


class = function(init, super)

    meta = [
        'super':super,
        'get': function(self, sought)
            return self{sought}
        end,
        'set': function(self, key, value)
            self{key} = value
        end
    ]

    f = function()(init, meta)
        sys.print(sys.args())
        if init and (init.type == 'function') then
            self = init(sys.args())
        else
            self = []
        end

        self!get = function(self, sought)
            g = self!meta!find(sought)
            if (g==nil) and (self!meta!super) then
                g = self!meta!super[sought]
            end
            return g
        end

        self!meta = meta
        return self
    end

    f!meta = meta
    f!get = function(self, sought) return self!meta!get{sought} end
    f!set = function(self, key, value) self!meta!set(key, value) end

    return f
end


List = class( function(name)
                  m = name[0]
                  return ['moi':m, 'list':[]]
              end )

List.add = function(self, datum)
    self!list.add(datum)
end

z = List

list = List('x')

list.add(6)

List.has = function(self, havin)
    return self!list!find(havin) != nil
end

sys.print(list.has(7))
sys.print(list.has(6))