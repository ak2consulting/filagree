compiler = [

    'lexify' : function(self, lexeme, value)
        return ['lexeme' : lexeme, 'value' : value]
    end,

    'lex' : function(self, script)

        lexeme = function(self)
            for word in self.vocabulary
                slice = self.script.part(self.lex_index, word.length)
                if word == slice then
                    self.lex_index = self.lex_index + word.length
                    return self.lexify(word)
        end end end

        number = function(self)
            digits = '0123456789'
            if digits.has(self.script[self.lex_index])
                n,j = sys.atoi(self.script, self.lex_index)
                self.lex_index = self.lex_index + j
                return self.lexify('number', n)
        end end

        self.alnum = function(self)
            if self.lex_index >= self.script.length then return nil end
            c = self.script.part(self.lex_index, 1)
            if self.idchars.has(c) then return c end
            return nil
        end

        identifier = function(self)
            id = ''
            while c = self.alnum()
                id = id + c
                self.lex_index = self.lex_index + 1
            end
            if id.length > 0 then
                return self.lexify('id', id)
            end
            return false
        end

        fit = function(self)
            args = sys.args()
            args.remove(0)
            for arg in args
                #sys.print('arg = ' + arg)
                if l = arg(self) then return l end
            end
            return false
        end

        self.script = script
        result = []
        self.lex_index = 0

        self.idchars = '_01234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
        self.vocabulary = [ '+', '-', '/*', '*/', '=']
        while self.lex_index < script.length

            while ' \t\n'.has(script[self.lex_index]) # white space
                self.lex_index = self.lex_index + 1
            end

            if found = fit(self, number, identifier, lexeme) then
                result.insert(found)
            else
                throw ('could not lex')
            end
        end

        return result

    end, # lex

    'parser' : [

        'parse' : function(self, lexemes)
            self.lexemes = lexemes
            self.parse_index = 0
            return self.statements()
        end,

        'statements' : function(self)
            a = self.assignment()
            if not a then throw ('could not parse') end
            return a
        end,

        'assignment' : function(self)
            lhs = self.fetch_may(['id'])
            if not lhs then return nil end
            e = self.fetch_may(['='])
            if not e then return nil end
            rhs = self.exp()
            if not rhs then throw('missing expression') end
            return ['lexeme':'=', 'lhs':lhs, 'children':[rhs]]
        end,

        'exp' : function(self)
            op1 = self.exp2()
            if not op1 then return nil end
            wrd = self.fetch_may(['+'])
            if not wrd then return op1 end
            op2 = self.exp2()
            if not op2 then throw 'bad exp' end
            wrd.children = [op1, op2]
            return wrd
        end,

        'exp2' : function(self)
            return self.fetch_may(['id', 'number', 'string'])
        end,

        'fetch_may' : function(self, options)
            if self.parse_index >= self.lexemes.length then
                return nil
            end
            l = self.lexemes[self.parse_index]
            if options.has(l.lexeme) then
                self.parse_index = self.parse_index + 1
                return l
            end
            return nil
        end,

    ], # parser

    'opcode' : ['VM_INT':1, 'VM_ADD':2, 'VM_SET':3, 'VM_VAR':4],

    'bytes' : function(self, n)
        return n.serialize(false)
    end,

    'generate' : function(self, root)

        code = ''
        for child in root.children
            code = code + self.generate(child)
        end

        if root.lexeme == 'number' then
            return self.bytes(self.opcode.VM_INT) + self.bytes(root.value)
        else if root.lexeme == 'id' then
            return self.bytes(root.value)
        else if root.lexeme == '+' then
            return code + self.bytes(self.opcode.VM_ADD)
        else if root.lexeme == '=' then
            return code + self.bytes(self.opcode.VM_SET) + self.generate(root.lhs)
        else
            throw('could not generate')
        end
    end,

    'build' : function(self, input)
        lexemes = self.lex(input)
        parsed = self.parser.parse(lexemes)
        program = self.generate(parsed)
        return program
    end,

    'interpret_file' : function(self, filename)

        try
            script = sys.read(filename)
            bytecode = self.build(script)
            sys.run(bytecode)
        catch err
            sys.print(err)
        end

    end
]

compiler.interpret_file('program.fg')