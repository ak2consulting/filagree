compiler = [

    'lex' : function(self, script)

        lexeme = function(lexeme, value)
            return ['lexeme' : lexeme, 'value' : value]
        end

        result = []
        i = 0

        white = ' \t\n'
        digits = '0123456789'
        vocabulary = [ '+', '-', '/*', '*/']

        while i < script.length

            while white.find(script[i]) != -1           # white space
                i = i + 1
            end

            if digits.find(script[i]) != -1             # number
                n,j = sys.atoi(script, i)
                i = i + j
                result.add(lexeme('number', n))
            else
                for word in vocabulary                  # in vocab
                    if script.find(word, i) == i then
                        result.add(lexeme('word', word))
                        i = i + word.length
        end end end end

        return result

    end,

    'parser' : [

        'parse' : function(self, lexemes)
            self.lexemes = lexemes
            self.parse_index = 0
            return self.statements()
        end,

        'statements' : function(self)
            return self.exp()
        end,

        'exp' : function(self)
            op1 = self.exp2()
            if not op1 then return nil end
            wrd = self.fetch_may(['word'])
            if not wrd then return op1 end
            op2 = self.exp2()
            if not op2 then throw 'bad exp' end
            wrd.children = [op1, op2]
            return wrd
        end,

        'exp2' : function(self)
            return self.fetch_may(['variable', 'number', 'string'])
        end,

        'fetch_may' : function(self, options)
            if self.parse_index >= self.lexemes.length then
                return nil
            end
            l = self.lexemes[self.parse_index]
            if options.find(l.lexeme) != -1 then
                self.parse_index = self.parse_index + 1
                return l
            end
            return nil
        end,
    ],

    'opcode' : ['VM_INT':1, 'VM_ADD':2],

    'generate_code' : function(self, root, code)
        for child in root.children
            code = code + self.generate_code(child, code)
        end
        if root.lexeme == 'word' then
            code = code + self.opcode.VM_ADD
        else if root.lexeme == 'number' then
            code = code + self.opcode.VM_INT.serialize(true) # todo: meta code.add
            code = code + root.value.serialize(true)
        end
        return code
    end,

    'generate' : function(self, root)
        code = self.generate_code(root, '')
        code = code.length.serialize(true) + code
        return code
    end,

    'build' : function(self, input)

        lexemes = self.lex(input)
        parsed = self.parser.parse(lexemes)
        program = self.generate(parsed)
        return program

    end,

    'interpret_file' : function(self, filename)

        try
            script = sys.read(filename)
            bytecode = self.build(script)
            sys.run(bytecode)
        catch err
            sys.print(err)
        end

    end
]

compiler.interpret_file('program.fg')